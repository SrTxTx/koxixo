// Criar usu√°rio de teste e depois excluir
const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

async function createTestUserAndDelete() {
  console.log('üß™ Criando usu√°rio de teste para demonstrar exclus√£o...\n')

  try {
    // 1. Criar usu√°rio de teste
    console.log('1Ô∏è‚É£ Criando usu√°rio de teste...')
    const hashedPassword = await bcrypt.hash('123456', 10)
    
    const testUser = await prisma.user.create({
      data: {
        name: 'Usu√°rio de Teste',
        email: 'teste@koxixo.com',
        password: hashedPassword,
        role: 'VENDEDOR'
      }
    })

    console.log(`‚úÖ Usu√°rio criado: ${testUser.name} (ID: ${testUser.id})`)

    // 2. Criar pedido para o usu√°rio de teste
    console.log('\n2Ô∏è‚É£ Criando pedido para o usu√°rio de teste...')
    
    const testOrder = await prisma.order.create({
      data: {
        title: 'Pedido de Teste para Exclus√£o',
        description: 'Este pedido foi criado para testar a funcionalidade de exclus√£o',
        value: 150.00,
        priority: 'MEDIUM',
        createdById: testUser.id
      }
    })

    console.log(`‚úÖ Pedido criado: "${testOrder.title}" (ID: ${testOrder.id})`)

    // 3. Verificar situa√ß√£o antes da exclus√£o
    console.log('\n3Ô∏è‚É£ Situa√ß√£o antes da exclus√£o:')
    const userWithOrders = await prisma.user.findUnique({
      where: { id: testUser.id },
      include: {
        _count: {
          select: { createdOrders: true }
        }
      }
    })

    console.log(`   Usu√°rio: ${userWithOrders?.name}`)
    console.log(`   Pedidos criados: ${userWithOrders?._count.createdOrders}`)
    console.log(`   ‚ùå ANTES: Este usu√°rio N√ÉO podia ser exclu√≠do`)

    // 4. Simular comportamento da nova API
    console.log('\n4Ô∏è‚É£ Simulando nova funcionalidade de exclus√£o...')
    
    // Buscar admin para receber os pedidos
    const admin = await prisma.user.findFirst({
      where: { role: 'ADMIN' }
    })

    if (admin) {
      console.log(`   üìã Transferindo pedidos para: ${admin.name}`)
      
      // Transferir pedidos
      await prisma.order.updateMany({
        where: { createdById: testUser.id },
        data: { createdById: admin.id }
      })

      console.log(`   ‚úÖ Pedidos transferidos com sucesso`)

      // Excluir usu√°rio
      await prisma.user.delete({
        where: { id: testUser.id }
      })

      console.log(`   ‚úÖ Usu√°rio "${testUser.name}" exclu√≠do com sucesso`)

      // Verificar se pedido ainda existe
      const orderStillExists = await prisma.order.findUnique({
        where: { id: testOrder.id },
        include: { createdBy: true }
      })

      if (orderStillExists) {
        console.log(`   ‚úÖ Pedido preservado: "${orderStillExists.title}"`)
        console.log(`   ‚úÖ Novo propriet√°rio: ${orderStillExists.createdBy.name}`)
      }
    }

    console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!')
    console.log('\nüìä FUNCIONALIDADE IMPLEMENTADA:')
    console.log('   ‚úÖ Admin pode excluir usu√°rios com pedidos')
    console.log('   ‚úÖ Pedidos s√£o automaticamente transferidos')
    console.log('   ‚úÖ Nenhum dado √© perdido')
    console.log('   ‚úÖ Sistema mant√©m integridade dos dados')

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createTestUserAndDelete()