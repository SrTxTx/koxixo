// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      String   // ADMIN, VENDEDOR, ORCAMENTO, PRODUCAO
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos - pedidos criados
  createdOrders   Order[] @relation("CreatedBy")
  
  // Relacionamentos - ações em pedidos
  approvedOrders  Order[] @relation("ApprovedBy")
  rejectedOrders  Order[] @relation("RejectedBy")
  completedOrders Order[] @relation("CompletedBy")
	  deliveredOrders Order[] @relation("DeliveredBy")

  // Relacionamento - pedidos editados
  lastEditedOrders Order[] @relation("LastEditedBy")

  @@map("users")
}

model Order {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  value       Float?
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED, IN_PROGRESS, COMPLETED, DELIVERED, CANCELLED
  priority    String   @default("MEDIUM")  // HIGH, MEDIUM, LOW
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  dueDate     DateTime? @map("due_date")

  // Quem criou
  createdById Int @map("created_by_id")
  createdBy   User @relation("CreatedBy", fields: [createdById], references: [id])

  // Quem aprovou
  approvedAt   DateTime? @map("approved_at")
  approvedById Int? @map("approved_by_id")
  approvedBy   User? @relation("ApprovedBy", fields: [approvedById], references: [id])

  // Quem rejeitou
  rejectedAt      DateTime? @map("rejected_at")
  rejectedById    Int? @map("rejected_by_id")
  rejectedBy      User? @relation("RejectedBy", fields: [rejectedById], references: [id])
  rejectionReason String? @map("rejection_reason")

  // Quem completou a produção
  completedAt   DateTime? @map("completed_at")
  completedById Int? @map("completed_by_id")
  completedBy   User? @relation("CompletedBy", fields: [completedById], references: [id])

  // Quem marcou como entregue
  deliveredAt   DateTime? @map("delivered_at")
  deliveredById Int? @map("delivered_by_id")
  deliveredBy   User? @relation("DeliveredBy", fields: [deliveredById], references: [id])

  // Última edição
  lastEditedById Int? @map("last_edited_by_id")
  lastEditedBy   User? @relation("LastEditedBy", fields: [lastEditedById], references: [id])
  lastEditedAt   DateTime? @map("last_edited_at")

  @@map("orders")
}
