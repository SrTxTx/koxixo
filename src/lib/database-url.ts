import { Prisma } from '@prisma/client'

// Fun√ß√£o para garantir que a URL do banco sempre tenha prepared_statements=false
export const getDatabaseUrl = () => {
  const baseUrl = process.env.DATABASE_URL || ''
  
  // Se j√° tem prepared_statements=false, retorna como est√°
  if (baseUrl.includes('prepared_statements=false')) {
    return baseUrl
  }
  
  // Se tem outros par√¢metros, adiciona o prepared_statements=false
  if (baseUrl.includes('?')) {
    return `${baseUrl}&prepared_statements=false`
  }
  
  // Se n√£o tem par√¢metros, adiciona como primeiro
  return `${baseUrl}?prepared_statements=false`
}

// Configura√ß√µes espec√≠ficas para produ√ß√£o na Vercel
export const getProductionConfig = (): Prisma.PrismaClientOptions => ({
  // Configura√ß√µes de log otimizadas com tipos corretos
  log: process.env.NODE_ENV === 'development' 
    ? [
        { level: 'query', emit: 'stdout' },
        { level: 'error', emit: 'stdout' },
        { level: 'warn', emit: 'stdout' }
      ]
    : [
        { level: 'error', emit: 'stdout' }
      ],
    
  // Configura√ß√µes para ambiente serverless
  errorFormat: 'pretty',
  
  // Configura√ß√µes de datasource
  datasources: {
    db: {
      url: getDatabaseUrl(),
    },
  },
})

console.log('üîß Database URL configurada:', getDatabaseUrl().replace(/:[^:]*@/, ':***@'))